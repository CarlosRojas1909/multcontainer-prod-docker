language: generic
sudo: required
services:
  - docker

before_install:
  # we run test only on development, here we are building and image using dockerfile.dev to run our test only on our client file(react app)
  - docker build -t jcr1221/react-test -f ./client/Dockerfile.dev ./client

script:
  - docker run -e CI=true jcr1221/react-test npm run test

after_success:
  # building our production image of each service
  - docker build -t jcr1221/multi-client ./client
  - docker build -t jcr1221/multi-nginx ./nginx
  - docker build -t jcr1221/multi-server ./server
  - docker build -t jcr1221/multi-worker ./worker

  # Login into Docker hub through Travis Ci using docker CLI(write: docker login in the terminal). DOCKER_PASSWORD AND DOCKER_ID variables are comming from  travis account saved previously manually...this is pretty much a complicated way to login into Docker hub
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin

  # Telling travis to take the production images and push them to docher hub
  - docker push jcr1221/multi-client
  - docker push jcr1221/multi-nginx
  - docker push jcr1221/multi-server
  - docker push jcr1221/multi-worker

# for deploy to AWS 
deploy:
  provider: elasticbeanstalk
  region: us-east-2
  app: multi-docker
  env: MultiDocker-env
  # S3(bucket in the cloud is created automatically when creating an environment for our multi-docker app)
  bucket_name: elasticbeanstalk-us-east-2-927908546171
  bucket_path: docker-multi
  on:
    branch: master
  # We create AWS_ACCESS_KEY and AWS_SECRET_KEY variables in AWS account. going to a service in amazon(iam)/Users....Username, Access tye(Programmatic access), click Permission/ search for all policy for elasticbeanstack(select all or whatever fits better for your app)/review/CreateUser
  # AWS_ACCESS_KEY and AWS_SECRET_KEY are created in your travis account and save as envoromnment variables.
  access_key_id: 
    secure: $AWS-ACCESS-KEY
  secret_access_key:
    secure: $AWS_SECRET_KEY